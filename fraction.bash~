#!/bin/bash

_a=
_b=
_a_num=
_a_den=
_b_num=
_b_den=
declare -A _vars  # associative array


function _() {
    #local a oper b
    local varname
    varname=
    _a=$1; shift
    if expr $_a : ".*=" &>/dev/null; then
	varname=${_a%=}
	_a=$1; shift
    fi
    while [ $# -gt 1 ]; do
	oper=$1; shift
	_b=$1; shift
	varlookup
	case $oper in
	    \+) PLUS;;
	    \-) MINUS;;
	    \/) DIVIDE;;
	    \@) TIMES;;
	    \^) POWER;;
	    *) echo "Unknown oper: '$oper'";;
	esac
    done
    simplify
    if [ -n "$varname" ]; then
	_vars[$varname]=$_a
    fi
    echo $_a
}

# Tests if $x is a fraction
function frac() {
    local x
    x=$1
    expr $x : '.*/' &>/dev/null
}

function fractionalize() {
    if ! frac $_a; then
	_a=$_a/1
    fi
    if ! frac $_b; then
	_b=$_b/1
    fi
    _a_num=${_a%/*}
    _a_den=${_a#*/}
    _b_num=${_b%/*}
    _b_den=${_b#*/}
}

function isvar() {
    local x
    x=$1
    [ -n "${_b//[^0-9/]/}" ]
}

# Looks up $_a and $_b if they're a variable
function varlookup() {
    if isvar $_a; then
	_a=${_vars[$_a]}
    fi
    if isvar $_b; then
	_b=${_vars[$_b]}
    fi
}

function gcd() {
    local a b
    a=$1
    b=$2
    if [ $a = 0 -o $b = 0 ]; then
	echo 1
    elif [ $a = $b ]; then
	echo $a
    elif [ $a -gt $b ]; then
	gcd $((a-b)) $b
    else
	gcd $a $((b-a))
    fi
}

function simplify() {
    local gcd
    fractionalize
    gcd=$(gcd ${_a_num#-} ${_a_den#-})
    _a=$(($_a_num / $gcd))/$(($_a_den / $gcd))
    fractionalize
    if [ $_a_den = 1 ]; then
	_a=$_a_num
    fi
}

function samedenom() {
    ((_a_num *= _b_den))
    ((_b_num *= _a_den))
    ((_a_den *= _b_den))
    ((_b_den  = _a_den))
}

function PLUS() {
    if frac $_a || frac $_b; then
	fractionalize
	samedenom
	_a=$(($_a_num + $_b_num))/$_b_den
    else
	_a=$(($_a + $_b))
    fi
}

function MINUS() {
    if frac $_a || frac $_b; then
	fractionalize
	samedenom
	_a=$(($_a_num - $_b_num))/$_b_den
    else
	_a=$(($_a - $_b))
    fi
}

function TIMES() {
    if frac $_a || frac $_b; then
	fractionalize
	_a=$(($_a_num * $_b_num))/$(($_a_den * $_b_den))
    else
	_a=$(($_a * $_b))
    fi
}

function DIVIDE() {
    local temp
    fractionalize
    _b=$_b_den/$_b_num
    TIMES
}

function POWER() {
    local i old_b old_a
    fractionalize
    if [ ! $_b_den = 1 ]; then
	echo "Fractional powers not supported" >&2
	exit 1
    fi
    if [ $_b_num = 0 ]; then
	_a=1
    else
	old_b=$_b_num
	_b=$_a
	for((i=1; i<$old_b; i++)); do
	    TIMES
	done
    fi
}

_ x= 3/2 + 5 - 6 - 3 @ 4 / 3
_ 3 * x